{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      items: [],\n      searchText: \"\",\n      isOpen: false,\n      currentDateTime: \"\"\n    };\n  },\n  created() {\n    this.getTodos();\n    this.updateDateTime();\n    this.loadCompletionStatus(); // Laad de voltooide status bij het maken van de component\n  },\n\n  mounted() {\n    this.applyCompletionStatus(); // Pas de voltooide status toe na het renderen van de component\n  },\n\n  computed: {\n    filteredItems() {\n      if (!this.searchText) {\n        return this.items;\n      }\n      const searchTextLower = this.searchText.toLowerCase();\n      return this.items.filter(item => item.todo_naam.toLowerCase().includes(searchTextLower));\n    }\n  },\n  methods: {\n    async getTodos() {\n      try {\n        const response = await axios.get(\"http://localhost:5000/todos\");\n        this.items = response.data;\n        console.log(this.items);\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    async deleteTodo(id) {\n      try {\n        await axios.delete(`http://localhost:5000/todos/${id}`);\n        this.getTodos();\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    toggleCompletion(item) {\n      item.completed = !item.completed; // Wissel de voltooide status om\n\n      // Sla de voltooide status op in de lokale opslag\n      localStorage.setItem(\"completionStatus\", JSON.stringify(this.items));\n      this.applyCompletionStatus(); // Pas de voltooide status opnieuw toe\n    },\n\n    updateDateTime() {\n      this.currentDateTime = new Date().toLocaleString();\n      setTimeout(this.updateDateTime, 1000); // Werk de datum en tijd elke seconde bij\n    },\n\n    loadCompletionStatus() {\n      // Laad de voltooide status uit de lokale opslag\n      const completionStatus = localStorage.getItem(\"completionStatus\");\n      if (completionStatus) {\n        this.items = JSON.parse(completionStatus);\n      }\n    },\n    applyCompletionStatus() {\n      const completedCards = document.querySelectorAll(\".card.completed\");\n      completedCards.forEach(card => {\n        card.style.opacity = \"0.5\";\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","items","searchText","isOpen","currentDateTime","created","getTodos","updateDateTime","loadCompletionStatus","mounted","applyCompletionStatus","computed","filteredItems","searchTextLower","toLowerCase","filter","item","todo_naam","includes","methods","response","get","console","log","err","deleteTodo","id","delete","toggleCompletion","completed","localStorage","setItem","JSON","stringify","Date","toLocaleString","setTimeout","completionStatus","getItem","parse","completedCards","document","querySelectorAll","forEach","card","style","opacity"],"sources":["C:\\Users\\toes1\\Documents\\school\\webtechnologie\\vueproject\\to-do-list\\todolist\\frontend\\src\\components\\todolist.vue"],"sourcesContent":["<template>\r\n  <div class=\"achtergrond\">\r\n\r\n    <!-- navbar -->\r\n    <nav class=\"navbar is-light\" role=\"navigation\" aria-label=\"main navigation\">\r\n      <div class=\"navbar-brand\">\r\n        <a role=\"button\" class=\"navbar-burger\" aria-label=\"menu\" aria-expanded=\"false\" @click=\"isOpen = !isOpen\" v-bind:class=\"{'is-active': isOpen}\">\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n          <span aria-hidden=\"true\"></span>\r\n        </a>\r\n      </div>\r\n      <div class=\"navbar-menu\" v-bind:class=\"{'is-active': isOpen}\">\r\n        <div class=\"navbar-end\">\r\n          <router-link to=\"/\" class=\"navbar-item is-tab\">Home</router-link>\r\n          <router-link to=\"/about\" class=\"navbar-item is-tab\">calender</router-link>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n    <!-- tijd en datum -->\r\n    <b><h1>Vandaag</h1></b>\r\n    <p class=\"datumentijd\">{{ currentDateTime }}</p>\r\n\r\n    <!-- zoekbalk -->\r\n    <input class=\"zoekbalk\" placeholder=\"üîçÔ∏é Zoek\" v-model=\"searchText\">\r\n\r\n    <!-- de todo's -->\r\n    <div class=\"columns is-multiline is-centered\">\r\n      <div v-for=\"item in filteredItems\" :key=\"item.todo_id\" class=\"column is-one-third\">\r\n        <div class=\"card column is-half is-offset-one-quarter\" :class=\"{ 'completed': item.completed }\">\r\n          <div class=\"card-content\">\r\n            <p class=\"title\">{{ item.todo_naam }}</p>\r\n            <p class=\"subtitle\">{{ item.todo_catogorie }}</p>\r\n          </div>\r\n          <footer class=\"card-footer\">\r\n            <router-link :to=\"{name:'Edit', params: { id: item.todo_id }}\" class=\"card-footer-item has-text-info\">‚úèÔ∏è</router-link>\r\n            <a class=\"card-footer-item has-text-danger\" @click=\"deleteTodo(item.todo_id)\">üóëÔ∏è</a>\r\n            <a class=\"card-footer-item\" @click=\"toggleCompletion(item)\">{{ item.completed ? '‚ùå' : '‚úÖ' }}</a>\r\n          </footer>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- add todo knop -->\r\n    <router-link :to=\"{name: 'Create' }\" class=\"button mooieknop\">+ Add Todo</router-link>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      items: [],\r\n      searchText: \"\",\r\n      isOpen: false,\r\n      currentDateTime: \"\"\r\n    };\r\n  },\r\n\r\n  created() {\r\n    this.getTodos();\r\n    this.updateDateTime();\r\n    this.loadCompletionStatus(); // Laad de voltooide status bij het maken van de component\r\n  },\r\n\r\n  mounted() {\r\n    this.applyCompletionStatus(); // Pas de voltooide status toe na het renderen van de component\r\n  },\r\n\r\n  computed: {\r\n    filteredItems() {\r\n      if (!this.searchText) {\r\n        return this.items;\r\n      }\r\n      const searchTextLower = this.searchText.toLowerCase();\r\n      return this.items.filter(\r\n        (item) =>\r\n          item.todo_naam.toLowerCase().includes(searchTextLower)\r\n      );\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    async getTodos() {\r\n      try {\r\n        const response = await axios.get(\"http://localhost:5000/todos\");\r\n        this.items = response.data;\r\n        console.log(this.items);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n\r\n    async deleteTodo(id) {\r\n      try {\r\n        await axios.delete(`http://localhost:5000/todos/${id}`);\r\n        this.getTodos();\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    },\r\n\r\n    toggleCompletion(item) {\r\n      item.completed = !item.completed; // Wissel de voltooide status om\r\n\r\n      // Sla de voltooide status op in de lokale opslag\r\n      localStorage.setItem(\"completionStatus\", JSON.stringify(this.items));\r\n\r\n      this.applyCompletionStatus(); // Pas de voltooide status opnieuw toe\r\n    },\r\n\r\n    updateDateTime() {\r\n      this.currentDateTime = new Date().toLocaleString();\r\n      setTimeout(this.updateDateTime, 1000); // Werk de datum en tijd elke seconde bij\r\n    },\r\n\r\n    loadCompletionStatus() {\r\n      // Laad de voltooide status uit de lokale opslag\r\n      const completionStatus = localStorage.getItem(\"completionStatus\");\r\n      if (completionStatus) {\r\n        this.items = JSON.parse(completionStatus);\r\n      }\r\n    },\r\n\r\n    applyCompletionStatus() {\r\n      const completedCards = document.querySelectorAll(\".card.completed\");\r\n      completedCards.forEach((card) => {\r\n        card.style.opacity = \"0.5\";\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n  @import url(../css/opmaak.css);\r\n</style>"],"mappings":"AAkDA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,EAAE;MACdC,MAAM,EAAE,KAAK;MACbC,eAAe,EAAE;IACnB,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,QAAQ,CAAC,CAAC;IACf,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,oBAAoB,CAAC,CAAC,EAAE;EAC/B,CAAC;;EAEDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,qBAAqB,CAAC,CAAC,EAAE;EAChC,CAAC;;EAEDC,QAAQ,EAAE;IACRC,aAAaA,CAAA,EAAG;MACd,IAAI,CAAC,IAAI,CAACV,UAAU,EAAE;QACpB,OAAO,IAAI,CAACD,KAAK;MACnB;MACA,MAAMY,eAAc,GAAI,IAAI,CAACX,UAAU,CAACY,WAAW,CAAC,CAAC;MACrD,OAAO,IAAI,CAACb,KAAK,CAACc,MAAM,CACrBC,IAAI,IACHA,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC,CAACI,QAAQ,CAACL,eAAe,CACzD,CAAC;IACH;EACF,CAAC;EAEDM,OAAO,EAAE;IACP,MAAMb,QAAQA,CAAA,EAAG;MACf,IAAI;QACF,MAAMc,QAAO,GAAI,MAAMrB,KAAK,CAACsB,GAAG,CAAC,6BAA6B,CAAC;QAC/D,IAAI,CAACpB,KAAI,GAAImB,QAAQ,CAACpB,IAAI;QAC1BsB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACtB,KAAK,CAAC;MACzB,EAAE,OAAOuB,GAAG,EAAE;QACZF,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;MAClB;IACF,CAAC;IAED,MAAMC,UAAUA,CAACC,EAAE,EAAE;MACnB,IAAI;QACF,MAAM3B,KAAK,CAAC4B,MAAM,CAAE,+BAA8BD,EAAG,EAAC,CAAC;QACvD,IAAI,CAACpB,QAAQ,CAAC,CAAC;MACjB,EAAE,OAAOkB,GAAG,EAAE;QACZF,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;MAClB;IACF,CAAC;IAEDI,gBAAgBA,CAACZ,IAAI,EAAE;MACrBA,IAAI,CAACa,SAAQ,GAAI,CAACb,IAAI,CAACa,SAAS,EAAE;;MAElC;MACAC,YAAY,CAACC,OAAO,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAChC,KAAK,CAAC,CAAC;MAEpE,IAAI,CAACS,qBAAqB,CAAC,CAAC,EAAE;IAChC,CAAC;;IAEDH,cAAcA,CAAA,EAAG;MACf,IAAI,CAACH,eAAc,GAAI,IAAI8B,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC,CAAC;MAClDC,UAAU,CAAC,IAAI,CAAC7B,cAAc,EAAE,IAAI,CAAC,EAAE;IACzC,CAAC;;IAEDC,oBAAoBA,CAAA,EAAG;MACrB;MACA,MAAM6B,gBAAe,GAAIP,YAAY,CAACQ,OAAO,CAAC,kBAAkB,CAAC;MACjE,IAAID,gBAAgB,EAAE;QACpB,IAAI,CAACpC,KAAI,GAAI+B,IAAI,CAACO,KAAK,CAACF,gBAAgB,CAAC;MAC3C;IACF,CAAC;IAED3B,qBAAqBA,CAAA,EAAG;MACtB,MAAM8B,cAAa,GAAIC,QAAQ,CAACC,gBAAgB,CAAC,iBAAiB,CAAC;MACnEF,cAAc,CAACG,OAAO,CAAEC,IAAI,IAAK;QAC/BA,IAAI,CAACC,KAAK,CAACC,OAAM,GAAI,KAAK;MAC5B,CAAC,CAAC;IACJ;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}